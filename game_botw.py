import asyncio
import logging
import time
import cv2
from pathlib import Path
from surrortg import Game
from surrortg.inputs import Switch 
from surrortg.image_recognition import AsyncVideoCapture, get_pixel_detector
from games.ninswitch.ns_gamepad_serial import NSGamepadSerial, NSButton, NSDPad
from games.botw.ns_dpad_switch import NSDPadSwitch
from games.botw.ns_joystick import NSJoystick
from games.botw.ns_switch import NSSwitch

import os
import sys
import serial
import RPi.GPIO as GPIO
import json
import requests
import telebot
bot = telebot.TeleBot("1634580045:AAHKnC5QRjub--EJMV7UWsdi019-AW5u42I")
chat_id = 1645773858

POINTS_PER_GAME = 5

# image rec
SAVE_FRAMES = False
SAVE_DIR_PATH = "./games/botw/imgs/"
global save_individual_frame, allowReset
save_individual_frame = False
allowReset = True

#reset pins
GPIO.setmode(GPIO.BCM)
nsg2_reset = 22
nsg3_reset = 23
GPIO.setup(nsg2_reset, GPIO.OUT)
GPIO.setup(nsg3_reset, GPIO.OUT)
ON = GPIO.LOW
OFF = GPIO.HIGH
send_sig = GPIO.output

captureFrame = False

# ----------------------------------------------------

NO_INV_1 = [
    ((581, 45), (229, 240, 223)),
    ((580, 56), (230, 238, 215)),
    ((587, 58), (236, 242, 230)),
    ((597, 54), (231, 235, 220)),
    ((605, 53), (232, 241, 212)),
    ((612, 52), (227, 240, 222)),
    ((617, 55), (246, 251, 231)),
    ((634, 53), (250, 255, 240)),
    ((645, 53), (233, 247, 224)),
    ((653, 49), (231, 231, 203)),
    ((661, 55), (229, 227, 215)),
    ((673, 54), (226, 235, 208)),
    ((679, 53), (231, 237, 223)),
    ((694, 58), (243, 250, 219)),
    ((483, 54), (236, 242, 214)),
    ((796, 54), (233, 239, 211)),
    ((494, 49), (238, 241, 210)),
    ((783, 52), (234, 236, 212)),
]

NO_INV_2 = [
    ((600, 364), (234, 231, 226)),
    ((603, 382), (231, 231, 231)),
    ((613, 392), (231, 231, 231)),
    ((627, 394), (231, 231, 231)),
    ((631, 315), (231, 231, 231)),
    ((600, 314), (231, 231, 231)),
    ((906, 393), (231, 231, 231)),
    ((938, 382), (231, 231, 231)),
    ((936, 364), (231, 231, 231)),
    ((690, 371), (45, 45, 45)),
    ((764, 309), (45, 45, 45)),
    ((837, 364), (45, 45, 45)),
    ((836, 307), (45, 45, 45)),
    ((777, 361), (45, 45, 45)),
    ((698, 316), (45, 45, 45)),
    ((709, 516), (231, 231, 231)),
    ((744, 515), (231, 231, 231)),
    ((940, 502), (133, 133, 133)),
    ((598, 503), (139, 140, 144)),
]

SAVE_MENU =  [
    ((514, 469), (244, 247, 216)),
    ((514, 509), (254, 255, 224)),
    ((766, 510), (237, 241, 208)),
    ((765, 469), (236, 236, 208)),
    ((559, 491), (18, 18, 16)),
    ((711, 493), (10, 10, 8)),
    ((920, 380), (102, 106, 105)),
    ((926, 333), (82, 88, 88)),
    ((916, 522), (75, 79, 78)),
    ((625, 528), (74, 79, 73)),
    ((627, 383), (104, 109, 105)),
]

LOAD_MENU = [
    ((183, 276), (101, 102, 84)),
    ((305, 274), (102, 103, 85)),
    ((919, 281), (81, 89, 91)),
    ((920, 373), (101, 105, 104)),
    ((487, 56), (51, 53, 40)),
    ((609, 53), (44, 46, 33)),
    ((661, 53), (45, 47, 33)),
    ((1194, 680), (239, 243, 210)),
    ((175, 519), (10, 10, 10)),
    ((987, 483), (45, 55, 54)),
]

OPTIONS_MENU = [
    ((194, 390), (100, 103, 84)),
    ((317, 390), (101, 104, 83)),
    ((262, 391), (105, 108, 87)),
    ((929, 291), (76, 86, 88)),
    ((924, 337), (82, 88, 88)),
    ((926, 384), (102, 106, 105)),
    ((929, 520), (67, 73, 73)),
    ((1205, 676), (234, 238, 205)),
    ((1193, 677), (224, 227, 196)),
]

VR_MENU_START = [
    ((675, 208), (98, 101, 82)),
    ((769, 207), (100, 103, 82)),
    ((846, 207), (97, 100, 81)),
    ((927, 301), (20, 24, 25)),
    ((926, 354), (25, 29, 28)),
    ((214, 392), (28, 29, 23)),
    ((310, 390), (28, 29, 24)),
    ((257, 390), (29, 31, 18)),
]

VR_MENU_CONFIRM = [
    ((350, 340), (255, 255, 227)),
    ((458, 342), (255, 255, 225)),
    ((389, 228), (160, 160, 160)),
    ((400, 260), (7, 7, 7)),
    ((387, 149), (7, 7, 9)),
    ((368, 264), (253, 253, 251)),
    ((352, 142), (255, 255, 225)),
    ((451, 139), (255, 255, 225)),
    ((524, 181), (254, 255, 223)),
    ((513, 306), (254, 255, 223)),
    ((805, 211), (97, 100, 81)),
]

RETURN_TO_MAIN = [
    ((197, 575), (102, 105, 84)),
    ((264, 576), (105, 108, 87)),
    ((327, 575), (103, 106, 85)),
    ((917, 287), (81, 89, 91)),
    ((917, 369), (99, 103, 102)),
    ((621, 382), (104, 108, 107)),
    ((624, 282), (91, 95, 94)),
    ((897, 522), (84, 89, 85)),
    ((812, 519), (65, 70, 66)),
    ((629, 529), (75, 80, 74)),
]

CONTROLLER_MENU_1 = [ #PRESS +/-
    ((71, 645), (76, 76, 76)),
    ((64, 335), (76, 76, 76)),
    ((66, 91), (76, 76, 76)),
    ((663, 90), (76, 76, 76)),
    ((1142, 109), (76, 76, 76)),
    ((1208, 319), (76, 76, 76)),
    ((1210, 647), (76, 76, 76)),
    ((435, 362), (199, 199, 199)),
    ((454, 417), (195, 195, 195)),
    ((441, 331), (195, 195, 195)),
    ((461, 308), (67, 67, 67)),
    ((536, 301), (255, 255, 255)),
    ((745, 412), (255, 255, 255)),
    ((745, 295), (255, 255, 255)),
    ((543, 405), (255, 255, 255)),
    ((641, 350), (255, 255, 255)),
    ((1114, 537), (64, 69, 72)),
    ((1109, 594), (64, 69, 72)),
]

CONTROLLER_MENU_2 = [ #PRESS A twice
    ((474, 356), (255, 255, 255)),
    ((476, 490), (255, 255, 255)),
    ((785, 345), (255, 255, 255)),
    ((791, 503), (255, 255, 255)),
    ((569, 595), (50, 83, 255)),
    ((540, 594), (49, 82, 255)),
    ((557, 612), (49, 83, 251)),
]

CONTROLLER_MENU_2_2 = [
    ((427, 88), (255, 255, 251)),
    ((571, 107), (255, 255, 253)),
    ((657, 86), (251, 251, 249)),
    ((698, 107), (254, 253, 251)),
    ((789, 80), (253, 252, 248)),
    ((830, 96), (250, 250, 248)),
    ((543, 590), (177, 191, 220)),
    ((555, 611), (181, 191, 226)),
    ((567, 590), (178, 189, 221)),
    ((527, 250), (48, 86, 255)),
    ((587, 249), (46, 84, 253)),
    ((499, 250), (47, 83, 255)),
    ((615, 249), (44, 82, 253)),
]

MAP_MENU_EARLY_1 = [
    ((483, 41), (15, 197, 255)),
    ((494, 37), (27, 203, 255)),
    ((554, 38), (49, 49, 49)),
    ((718, 40), (57, 57, 57)),
    ((783, 42), (29, 193, 254)),
    ((793, 34), (18, 190, 252)),
    ((808, 676), (10, 218, 254)),
    ((908, 680), (25, 222, 254)),
    ((1025, 678), (21, 224, 255)),
    ((19, 704), (8, 120, 206)),
    ((254, 37), (19, 23, 24)),
    ((1260, 17), (10, 119, 202)),
    ((1258, 703), (27, 128, 208)),
]

MAP_MENU_EARLY_2 = [
    ((482, 43), (26, 196, 255)),
    ((495, 36), (25, 191, 249)),
    ((549, 39), (45, 45, 45)),
    ((702, 39), (82, 82, 82)),
    ((783, 43), (31, 197, 255)),
    ((795, 36), (23, 185, 249)),
    ((1266, 21), (15, 115, 200)),
    ((281, 39), (45, 45, 45)),
    ((19, 704), (14, 120, 204)),
    ((340, 681), (48, 48, 48)),
]

MINUS_MENU_BROAD = [
    ((1259, 300), (140, 112, 72)),
    ((1258, 16), (16, 116, 202)),
    ((1111, 46), (29, 29, 29)),
    ((1008, 40), (44, 42, 45)),
    ((150, 44), (26, 28, 27)),
    ((11, 175), (136, 110, 73)),
    ((42, 21), (32, 121, 201)),
    ((19, 705), (24, 134, 213)),
    ((114, 687), (46, 46, 46)),
    ((1174, 681), (22, 38, 38)),
    ((1259, 702), (20, 133, 209)),
    ((1251, 576), (138, 113, 73)),
]

MAP_MENU = [
    ((412, 677), (20, 224, 255)),
    ((597, 682), (22, 222, 255)),
    ((608, 681), (8, 228, 252)),
    ((804, 681), (21, 231, 255)),
    ((816, 680), (11, 214, 247)),
    ((909, 681), (23, 226, 255)),
    ((922, 681), (31, 211, 248)),
    ((1025, 680), (5, 217, 254)),
    ((1036, 680), (6, 224, 252)),
    ((1258, 702), (19, 130, 220)),
    ((1262, 20), (14, 113, 198)),
    ((20, 704), (6, 128, 213)),
    ((167, 679), (46, 46, 46)),
    ((262, 37), (28, 28, 28)),
    ((559, 39), (47, 47, 47)),
    ((720, 36), (81, 81, 81)),
    ((950, 38), (47, 47, 47)),
]

CHAT_PROMPT = [
    ((640, 654), (255, 255, 228)),
    ((629, 648), (252, 255, 233)),
    ((650, 648), (235, 237, 213)),
    ((640, 663), (243, 248, 226)),
]

DEATH_SCREEN_RED = [
    ((500, 334), (251, 47, 0)),
    ((500, 347), (255, 53, 3)),
    ((537, 349), (252, 45, 1)),
    ((531, 328), (249, 47, 0)),
    ((556, 350), (254, 50, 0)),
    ((558, 324), (252, 40, 0)),
    ((569, 339), (251, 43, 0)),
    ((582, 323), (254, 43, 0)),
    ((584, 349), (255, 51, 4)),
    ((603, 334), (254, 48, 1)),
    ((602, 321), (254, 42, 2)),
    ((603, 350), (255, 52, 2)),
    ((677, 329), (255, 47, 4)),
    ((693, 331), (254, 43, 0)),
    ((712, 325), (255, 39, 4)),
    ((720, 338), (255, 44, 4)),
    ((749, 347), (255, 50, 2)),
    ((750, 329), (253, 40, 0)),
    ((784, 335), (252, 44, 0)),
    ((802, 349), (254, 50, 0)),
    ((783, 349), (253, 52, 0)),
    ((782, 322), (255, 39, 0)),
]

DEATH_SCREEN_BLUE = [
    ((501, 333), (143, 255, 254)),
    ((501, 348), (165, 255, 255)),
    ((517, 350), (163, 253, 251)),
    ((538, 348), (166, 255, 254)),
    ((528, 324), (146, 255, 255)),
    ((556, 345), (170, 255, 255)),
    ((557, 323), (142, 255, 255)),
    ((568, 338), (162, 253, 255)),
    ((582, 323), (141, 255, 255)),
    ((582, 345), (167, 255, 255)),
    ((604, 322), (141, 255, 255)),
    ((605, 336), (153, 255, 255)),
    ((604, 349), (172, 255, 255)),
    ((678, 329), (146, 255, 255)),
    ((692, 317), (136, 254, 254)),
    ((693, 337), (156, 254, 255)),
    ((714, 324), (141, 253, 254)),
    ((721, 341), (158, 255, 255)),
    ((749, 323), (140, 254, 255)),
    ((750, 346), (168, 255, 255)),
    ((785, 320), (140, 254, 254)),
    ((784, 348), (166, 255, 255)),
    ((805, 325), (141, 254, 252)),
    ((798, 342), (158, 252, 254)),
]

DEATH_SCREEN_YELLOW = [
    ((501, 306), (243, 237, 1)),
    ((501, 332), (211, 214, 1)),
    ((501, 347), (192, 193, 1)),
    ((518, 350), (188, 189, 7)),
    ((528, 322), (221, 223, 0)),
    ((534, 339), (203, 205, 0)),
    ((538, 350), (181, 186, 0)),
    ((555, 349), (187, 187, 1)),
    ((558, 322), (223, 224, 0)),
    ((567, 338), (209, 206, 3)),
    ((581, 321), (224, 227, 0)),
    ((582, 349), (189, 190, 0)),
    ((604, 350), (190, 189, 0)),
    ((604, 322), (225, 226, 2)),
    ((677, 329), (213, 210, 0)),
    ((692, 316), (230, 229, 0)),
    ((694, 329), (215, 215, 3)),
    ((691, 342), (197, 198, 0)),
    ((713, 322), (226, 225, 0)),
    ((720, 339), (205, 207, 2)),
    ((751, 319), (225, 227, 4)),
    ((750, 348), (190, 193, 0)),
    ((784, 334), (210, 210, 0)),
    ((798, 345), (191, 192, 0)),
    ((785, 318), (220, 223, 0)),
    ((785, 349), (185, 190, 0)),
    ((804, 324), (219, 221, 0)),
]

HOME_SCREEN = [
    ((605, 63), (255, 142, 50)),
    ((712, 64), (255, 142, 50)),
    ((218, 77), (52, 52, 52)),
    ((44, 307), (52, 52, 52)),
    ((130, 558), (52, 52, 52)),
    ((1121, 558), (52, 52, 52)),
    ((1077, 129), (52, 52, 52)),
]

SOMETHING_WRONG =  [
    ((63, 317), (255, 255, 255)),
    ((244, 324), (255, 255, 5)),
    ((403, 322), (6, 255, 255)),
    ((559, 327), (0, 255, 1)),
    ((725, 330), (255, 0, 254)),
    ((883, 337), (255, 11, 0)),
    ((1035, 337), (0, 10, 255)),
    ((1195, 338), (7, 7, 7)),
]

IN_VR_MENU = [
    ((100, 49), (7, 7, 7)),
    ((649, 49), (7, 7, 7)),
    ((1208, 49), (7, 7, 7)),
    ((1219, 665), (7, 7, 7)),
    ((655, 649), (7, 7, 7)),
    ((89, 663), (7, 7, 7)),
    ((508, 323), (74, 82, 84)),
    ((511, 366), (90, 95, 91)),
    ((1091, 320), (72, 80, 82)),
    ((1094, 364), (90, 94, 93)),
    ((145, 472), (21, 22, 16)),
    ((142, 404), (24, 31, 23)),
    ((725, 409), (25, 27, 22)),
    ((729, 478), (21, 22, 17)),
]

TITLE_SCREEN = [
    ((992, 96), (252, 253, 221)),
    ((1041, 94), (253, 255, 218)),
    ((1004, 180), (254, 254, 220)),
    ((1047, 180), (254, 254, 220)),
    ((1046, 143), (255, 255, 220)),
    ((1071, 113), (255, 255, 221)),
    ((1072, 134), (255, 255, 224)),
    ((1073, 162), (253, 250, 219)),
    ((1086, 136), (248, 252, 215)),
    ((1095, 111), (251, 248, 215)),
    ((1115, 159), (253, 254, 222)),
    ((1114, 117), (253, 254, 220)),
    ((1114, 137), (253, 254, 220)),
    ((1133, 157), (237, 238, 206)),
    ((1150, 119), (252, 249, 216)),
    ((1150, 141), (253, 254, 223)),
    ((1150, 160), (252, 251, 220)),
    ((1176, 137), (254, 254, 218)),
    ((1199, 117), (254, 255, 223)),
    ((1207, 138), (255, 255, 225)),
    ((1213, 158), (254, 254, 220)),
    ((1023, 101), (102, 138, 138)),
    ((1023, 77), (177, 147, 85)),
    ((1006, 79), (180, 181, 212)),
    ((1037, 76), (105, 118, 170)),
    ((1024, 183), (65, 48, 38)),
    ((1023, 210), (110, 141, 143)),
    ((1022, 35), (38, 38, 90)),
]

WAKE_MENU = [
    ((789, 67), (255, 142, 50)),
    ((877, 66), (255, 142, 50)),
    ((819, 327), (255, 255, 255)),
    ((819, 372), (255, 255, 255)),
    ((710, 641), (255, 255, 255)),
    ((741, 643), (255, 255, 255)),
    ((54, 649), (255, 255, 255)),
    ((77, 648), (255, 255, 255)),
    ((178, 697), (29, 29, 29)),
    ((629, 166), (52, 52, 52)),
    ((1140, 559), (52, 52, 52)),
]

# ----------------------------------------------------

MAIN_QUEST_COMPLETE = [
    ((949, 180), (254, 255, 189)),
    ((949, 211), (246, 247, 181)),
    ((958, 200), (255, 255, 192)),
    ((976, 199), (255, 255, 197)),
    ((986, 193), (255, 254, 183)),
    ((993, 202), (253, 255, 194)),
    ((1002, 193), (255, 254, 193)),
    ((1013, 193), (254, 255, 193)),
    ((1014, 208), (255, 255, 197)),
    ((1028, 194), (245, 250, 184)),
    ((1036, 195), (253, 253, 191)),
    ((1047, 213), (255, 255, 192)),
    ((1057, 195), (254, 254, 194)),
    ((1057, 209), (255, 255, 194)),
    ((1082, 212), (254, 254, 194)),
    ((1081, 191), (249, 248, 183)),
    ((1099, 191), (255, 255, 190)),
    ((1099, 209), (253, 254, 188)),
    ((594, 119), (244, 213, 45)),
]

SHRINE_QUEST_COMPLETE =  [
    ((584, 113), (9, 204, 226)),
    ((967, 201), (248, 247, 190)),
    ((949, 212), (255, 255, 192)),
    ((949, 181), (255, 255, 190)),
    ((975, 201), (251, 252, 186)),
    ((959, 201), (254, 253, 189)),
    ((993, 204), (255, 255, 193)),
    ((985, 193), (255, 255, 191)),
    ((1001, 192), (253, 254, 188)),
    ((1002, 209), (254, 254, 192)),
    ((983, 211), (245, 240, 184)),
    ((1014, 192), (255, 254, 190)),
    ((1014, 209), (251, 251, 181)),
    ((1028, 195), (253, 249, 188)),
    ((1036, 193), (255, 254, 189)),
    ((1036, 207), (255, 255, 190)),
    ((1056, 193), (249, 248, 184)),
    ((1056, 207), (255, 254, 190)),
    ((1082, 192), (254, 253, 188)),
    ((1082, 208), (254, 255, 189)),
    ((1099, 192), (254, 253, 189)),
    ((1099, 210), (254, 253, 189)),
]

SIDE_QUEST_COMPLETE = [
    ((591, 120), (197, 248, 5)),
    ((592, 111), (195, 242, 6)),
    ((949, 211), (246, 247, 181)),
    ((949, 180), (253, 253, 189)),
    ((967, 201), (255, 253, 179)),
    ((958, 202), (255, 255, 190)),
    ((976, 202), (254, 253, 188)),
    ((983, 210), (255, 255, 183)),
    ((985, 193), (253, 253, 189)),
    ((992, 202), (255, 255, 191)),
    ((1001, 192), (254, 255, 193)),
    ((1002, 209), (255, 255, 188)),
    ((1014, 208), (255, 255, 196)),
    ((1013, 193), (253, 255, 185)),
    ((1027, 194), (255, 255, 192)),
    ((1036, 192), (255, 255, 188)),
    ((1036, 209), (255, 254, 185)),
    ((1047, 212), (254, 250, 186)),
    ((1055, 210), (253, 254, 186)),
    ((1056, 199), (255, 255, 191)),
    ((1055, 190), (255, 254, 183)),
    ((1068, 190), (255, 254, 190)),
    ((1068, 212), (255, 253, 186)),
    ((1083, 191), (255, 253, 192)),
    ((1082, 211), (254, 255, 190)),
    ((1100, 212), (254, 255, 190)),
    ((1099, 202), (255, 255, 191)),
    ((1099, 193), (255, 254, 190)),
]

REGISTER_HORSE = [
    ((670, 402), (248, 206, 0)),
    ((670, 430), (254, 218, 2)),
    ((670, 458), (249, 208, 0)),
    ((459, 574), (255, 253, 230)),
    ((468, 581), (255, 255, 231)),
    ((477, 583), (255, 255, 227)),
    ((500, 585), (236, 236, 208)),
    ((517, 581), (249, 250, 219)),
    ((529, 586), (255, 255, 229)),
    ((562, 586), (255, 255, 230)),
    ((453, 608), (255, 253, 228)),
    ((470, 616), (255, 254, 229)),
    ((483, 607), (248, 247, 219)),
    ((488, 616), (249, 247, 222)),
    ((494, 607), (239, 239, 211)),
    ((506, 615), (248, 247, 219)),
    ((601, 586), (252, 253, 222)),
    ((627, 588), (252, 251, 220)),
    ((667, 583), (254, 253, 222)),
    ((646, 585), (190, 191, 160)),
    ((653, 585), (231, 230, 202)),
    ((688, 578), (254, 253, 223)),
    ((704, 578), (255, 255, 226)),
    ((796, 578), (251, 253, 231)),
    ((804, 579), (242, 242, 216)),
    ((764, 580), (249, 255, 225)),
    ((963, 544), (251, 254, 227)),
    ((1196, 612), (199, 199, 197)),
]

HESTU_SLOT_EXPAND = [
    ((448, 602), (255, 255, 224)),
    ((457, 586), (252, 255, 228)),
    ((823, 601), (252, 255, 216)),
    ((831, 587), (250, 255, 225)),
    ((640, 651), (249, 250, 218)),
    ((630, 646), (251, 254, 233)),
    ((650, 646), (254, 255, 233)),
    ((640, 660), (198, 202, 179)),
    ((472, 584), (252, 255, 227)),
    ((470, 601), (246, 248, 224)),
    ((483, 593), (249, 252, 221)),
    ((497, 595), (255, 255, 234)),
    ((507, 591), (255, 255, 226)),
    ((525, 596), (247, 251, 216)),
    ((536, 591), (253, 255, 232)),
    ((614, 596), (246, 250, 225)),
    ((659, 596), (251, 255, 222)),
    ((810, 588), (253, 255, 233)),
    ((809, 601), (253, 255, 234)),
    ((483, 55), (235, 239, 204)),
    ((495, 49), (232, 238, 194)),
    ((783, 49), (234, 235, 201)),
    ((795, 55), (226, 229, 200)),
    ((724, 234), (138, 230, 245)),
]

TOWER_GET = [
    ((640, 651), (169, 253, 255)),
    ((629, 645), (187, 255, 255)),
    ((650, 645), (195, 253, 255)),
    ((640, 660), (167, 254, 255)),
    ((517, 595), (176, 254, 255)),
    ((529, 597), (188, 255, 255)),
    ((548, 600), (185, 254, 255)),
    ((556, 596), (192, 255, 255)),
    ((575, 594), (193, 255, 255)),
    ((594, 596), (185, 255, 255)),
    ((638, 597), (196, 255, 255)),
    ((645, 601), (191, 255, 255)),
    ((682, 597), (193, 255, 255)),
    ((691, 593), (186, 255, 255)),
    ((732, 593), (188, 255, 255)),
    ((765, 601), (198, 252, 254)),
    ((483, 41), (12, 201, 255)),
    ((495, 37), (16, 194, 254)),
    ((783, 36), (24, 193, 252)),
    ((795, 41), (26, 202, 255)),
    ((224, 38), (28, 28, 28)),
    ((300, 39), (29, 29, 29)),
    ((568, 35), (42, 42, 42)),
    ((726, 38), (61, 61, 61)),
    ((949, 35), (56, 56, 56)),
    ((257, 692), (168, 151, 105)),
    ((1100, 684), (43, 43, 43)),
    ((820, 684), (44, 44, 44)),
]

GIANT_FAIRY_UPGRADE = [
    ((538, 252), (248, 249, 217)),
    ((539, 313), (255, 255, 225)),
    ((545, 321), (250, 254, 219)),
    ((640, 430), (249, 252, 221)),
    ((608, 317), (210, 197, 178)),
]

MINI_BOSS_BEAT_TALLOS = [
    ((559, 67), (247, 248, 216)),
    ((559, 81), (248, 247, 219)),
    ((608, 76), (252, 252, 218)),
    ((660, 56), (251, 252, 218)),
    ((682, 67), (255, 255, 224)),
    ((686, 79), (254, 254, 220)),
    ((716, 69), (251, 251, 227)),
    ((745, 74), (237, 243, 205)),
    ((61, 37), (253, 47, 47)),
    ((1031, 582), (147, 239, 254)),
    ((446, 99), (74, 82, 71)),
]

MINI_BOSS_BEAT_HINOX = [
    ((609, 58), (248, 251, 220)),
    ((608, 81), (228, 226, 203)),
    ((621, 67), (250, 253, 226)),
    ((622, 82), (255, 255, 231)),
    ((645, 77), (251, 254, 223)),
    ((676, 66), (253, 254, 222)),
    ((686, 81), (251, 254, 225)),
    ((60, 36), (243, 47, 49)),
    ((446, 99), (21, 44, 38)),
    ((1031, 582), (154, 243, 255)),
]

MINI_BOSS_BEAT_STALNOX = [
    ((584, 55), (244, 248, 213)),
    ((568, 84), (239, 243, 220)),
    ((598, 66), (232, 234, 212)),
    ((599, 84), (241, 243, 221)),
    ((618, 68), (250, 250, 212)),
    ((623, 82), (252, 248, 219)),
    ((636, 68), (245, 249, 216)),
    ((635, 82), (248, 246, 221)),
    ((654, 67), (246, 246, 210)),
    ((663, 77), (240, 243, 216)),
    ((696, 65), (238, 237, 209)),
    ((708, 85), (251, 254, 225)),
    ((445, 98), (0, 37, 47)),
    ((61, 36), (248, 49, 46)),
    ((1032, 582), (154, 232, 254)),
]

MINI_BOSS_BEAT_MOLDUGA = [
    ((583, 61), (254, 255, 226)),
    ((585, 80), (254, 255, 223)),
    ((563, 69), (244, 248, 213)),
    ((620, 70), (247, 248, 216)),
    ((620, 83), (254, 255, 223)),
    ((637, 75), (249, 250, 216)),
    ((651, 74), (248, 252, 217)),
    ((660, 65), (250, 253, 222)),
    ((675, 75), (255, 255, 222)),
    ((696, 78), (247, 251, 218)),
    ((682, 69), (252, 255, 223)),
    ((716, 83), (238, 241, 210)),
    ((712, 67), (249, 255, 221)),
    ((61, 36), (253, 55, 52)),
    ((446, 99), (7, 44, 53)),
    ((1031, 582), (159, 237, 255)),
]

KOROK_SEED_GET = [
    ((538, 278), (254, 255, 228)),
    ((549, 282), (247, 251, 234)),
    ((560, 282), (251, 255, 232)),
    ((567, 277), (255, 255, 231)),
    ((576, 282), (253, 255, 226)),
    ((587, 280), (255, 255, 237)),
    ((595, 280), (218, 222, 187)),
    ((621, 278), (255, 255, 227)),
    ((622, 270), (248, 248, 220)),
    ((619, 288), (255, 255, 232)),
    ((633, 282), (249, 249, 221)),
    ((648, 282), (255, 255, 233)),
    ((673, 276), (255, 255, 225)),
    ((673, 284), (255, 255, 226)),
    ((664, 282), (255, 255, 231)),
    ((453, 329), (255, 255, 167)),
    ((475, 330), (255, 193, 0)),
    ((450, 343), (129, 96, 42)),
]

SPIRIT_ORB_GET = [
    ((638, 93), (55, 253, 255)),
    ((483, 93), (69, 250, 255)),
    ((793, 92), (59, 248, 254)),
    ((538, 288), (252, 255, 235)),
    ((539, 278), (244, 249, 219)),
    ((540, 270), (251, 255, 231)),
    ((551, 287), (255, 255, 229)),
    ((568, 280), (253, 255, 237)),
    ((575, 278), (255, 255, 241)),
    ((585, 283), (247, 255, 231)),
    ((593, 277), (250, 250, 222)),
    ((610, 279), (251, 255, 241)),
    ((631, 278), (255, 255, 237)),
    ((642, 278), (253, 255, 229)),
]

HEART_CONTAINER_GET = [
    ((443, 301), (180, 139, 23)),
    ((475, 302), (171, 123, 13)),
    ((459, 332), (251, 37, 1)),
    ((459, 354), (216, 48, 39)),
    ((481, 342), (102, 81, 36)),
    ((439, 343), (90, 43, 0)),
    ((426, 326), (188, 146, 34)),
    ((493, 327), (90, 80, 18)),
    ((433, 313), (246, 158, 108)),
    ((483, 313), (247, 38, 0)),
    ((540, 279), (254, 254, 228)),
    ((554, 281), (255, 255, 230)),
    ((576, 280), (254, 255, 232)),
    ((585, 277), (246, 246, 220)),
    ((595, 276), (255, 255, 230)),
    ((623, 286), (244, 247, 216)),
    ((625, 271), (255, 255, 236)),
    ((641, 281), (253, 255, 233)),
    ((648, 277), (255, 255, 232)),
    ((665, 276), (254, 254, 226)),
    ((680, 280), (253, 255, 231)),
    ((688, 280), (255, 255, 236)),
    ((696, 277), (255, 255, 233)),
    ((711, 282), (252, 255, 226)),
    ((727, 278), (254, 255, 232)),
]

STAMINA_CONTAINER_GET = [
    ((452, 348), (202, 194, 33)),
    ((456, 329), (28, 255, 0)),
    ((469, 322), (52, 255, 24)),
    ((453, 297), (253, 211, 11)),
    ((471, 349), (64, 244, 21)),
    ((437, 349), (117, 239, 66)),
    ((482, 322), (80, 95, 4)),
    ((539, 279), (255, 255, 233)),
    ((552, 276), (252, 254, 230)),
    ((567, 281), (255, 254, 233)),
    ((584, 277), (255, 255, 236)),
    ((597, 284), (253, 255, 234)),
    ((605, 277), (250, 250, 224)),
    ((627, 281), (253, 255, 234)),
    ((649, 285), (252, 255, 228)),
    ((670, 280), (254, 255, 237)),
    ((704, 282), (255, 255, 237)),
    ((720, 281), (253, 252, 231)),
]

SENSOR_PLUS_UPGRADE = [
    ((512, 227), (21, 233, 247)),
    ((525, 211), (7, 228, 254)),
    ((535, 210), (24, 225, 255)),
    ((532, 229), (16, 230, 255)),
    ((544, 228), (17, 237, 255)),
    ((562, 228), (39, 222, 255)),
    ((570, 229), (14, 229, 255)),
    ((572, 210), (16, 230, 255)),
    ((580, 211), (21, 232, 253)),
    ((587, 229), (5, 226, 255)),
    ((595, 218), (35, 235, 255)),
    ((605, 231), (29, 216, 251)),
    ((614, 211), (15, 231, 255)),
    ((611, 228), (9, 227, 252)),
    ((623, 228), (14, 224, 255)),
    ((655, 211), (35, 214, 254)),
    ((641, 227), (5, 229, 254)),
    ((671, 228), (38, 215, 255)),
    ((680, 218), (15, 232, 249)),
    ((698, 228), (8, 220, 255)),
    ((707, 217), (20, 222, 255)),
    ((726, 223), (27, 236, 255)),
    ((714, 223), (8, 233, 253)),
    ((735, 218), (8, 240, 250)),
    ((763, 219), (48, 238, 255)),
    ((768, 223), (35, 228, 255)),
    ((762, 229), (49, 227, 255)),
    ((757, 223), (19, 246, 255)),
    ((640, 326), (36, 246, 181)),
    ((653, 339), (30, 245, 178)),
    ((640, 652), (201, 255, 255)),
    ((164, 682), (35, 35, 35)),
    ((644, 682), (45, 45, 45)),
    ((1052, 679), (34, 34, 34)),
    ((953, 35), (46, 46, 46)),
    ((268, 40), (49, 49, 49)),
    ((1258, 18), (14, 115, 203)),
]

STASIS_PLUS_UPGRADE = [
    ((597, 211), (12, 231, 251)),
    ((585, 227), (28, 228, 253)),
    ((607, 217), (8, 242, 253)),
    ((608, 230), (23, 238, 255)),
    ((618, 218), (37, 232, 255)),
    ((626, 231), (50, 223, 253)),
    ((615, 227), (26, 228, 252)),
    ((642, 217), (22, 227, 255)),
    ((633, 229), (33, 243, 255)),
    ((650, 228), (34, 230, 255)),
    ((652, 210), (40, 224, 252)),
    ((666, 217), (24, 229, 255)),
    ((659, 229), (29, 238, 255)),
    ((691, 218), (52, 228, 251)),
    ((695, 223), (26, 229, 255)),
    ((690, 228), (30, 224, 252)),
    ((686, 223), (17, 233, 254)),
    ((640, 654), (197, 255, 255)),
    ((187, 681), (45, 45, 45)),
    ((641, 684), (36, 36, 36)),
    ((1066, 683), (25, 25, 25)),
    ((1265, 16), (10, 114, 199)),
    ((937, 39), (43, 43, 43)),
    ((381, 39), (31, 31, 31)),
    ((705, 343), (247, 248, 250)),
    ((675, 335), (255, 253, 176)),
    ((698, 309), (235, 243, 183)),
    ((619, 414), (26, 226, 249)),
    ((634, 597), (179, 250, 252)),
    ((772, 601), (205, 251, 255)),
]

BOMB_PLUS_UPGRADE = [
    ((524, 229), (53, 241, 253)),
    ((526, 210), (62, 239, 255)),
    ((536, 228), (29, 233, 255)),
    ((546, 224), (12, 232, 248)),
    ((564, 228), (23, 224, 244)),
    ((572, 229), (38, 236, 249)),
    ((582, 228), (28, 224, 250)),
    ((595, 230), (34, 239, 255)),
    ((596, 217), (24, 227, 255)),
    ((610, 217), (11, 242, 255)),
    ((611, 230), (25, 241, 255)),
    ((631, 220), (41, 229, 255)),
    ((650, 211), (34, 245, 252)),
    ((661, 228), (45, 233, 255)),
    ((670, 218), (53, 229, 252)),
    ((681, 226), (27, 234, 252)),
    ((688, 230), (35, 225, 251)),
    ((699, 219), (31, 252, 255)),
    ((706, 229), (28, 238, 253)),
    ((717, 210), (62, 222, 255)),
    ((725, 227), (27, 230, 247)),
    ((750, 219), (42, 232, 255)),
    ((754, 223), (33, 244, 255)),
    ((749, 229), (45, 220, 251)),
    ((744, 223), (20, 231, 248)),
    ((401, 327), (0, 237, 255)),
    ((419, 343), (252, 255, 250)),
    ((496, 328), (3, 235, 255)),
    ((514, 343), (252, 253, 255)),
    ((376, 302), (0, 104, 189)),
    ((470, 302), (0, 107, 190)),
    ((640, 654), (176, 255, 255)),
    ((175, 674), (43, 43, 45)),
    ((640, 673), (40, 40, 40)),
    ((1043, 671), (26, 34, 36)),
    ((939, 44), (41, 41, 41)),
    ((353, 39), (50, 50, 50)),
    ((1262, 24), (21, 116, 198)),
]

GOLD_RUPEE_GET = [
    ((454, 319), (199, 172, 29)),
    ((464, 318), (207, 173, 37)),
    ((460, 330), (191, 168, 30)),
    ((476, 322), (81, 88, 34)),
    ((444, 324), (155, 129, 42)),
    ((450, 304), (253, 255, 177)),
    ((545, 280), (255, 255, 228)),
    ((559, 276), (239, 238, 217)),
    ((570, 278), (251, 255, 233)),
    ((586, 276), (255, 255, 222)),
    ((607, 279), (245, 253, 232)),
    ((608, 270), (255, 254, 233)),
    ((628, 286), (250, 255, 233)),
    ((635, 292), (243, 253, 228)),
    ((660, 286), (227, 241, 224)),
    ((669, 278), (237, 247, 238)),
]

SILVER_RUPEE_GET = [
    ((454, 320), (191, 189, 174)),
    ((463, 320), (183, 181, 166)),
    ((459, 333), (177, 175, 162)),
    ((551, 281), (252, 255, 228)),
    ((540, 279), (252, 255, 228)),
    ((615, 278), (252, 255, 229)),
    ((568, 286), (254, 255, 232)),
    ((640, 286), (251, 254, 225)),
    ((648, 286), (247, 247, 223)),
    ((664, 282), (253, 255, 230)),
    ((640, 427), (250, 253, 222)),
]

PURPLE_RUPEE_GET = [
    ((459, 312), (192, 45, 214)),
    ((459, 333), (176, 51, 191)),
    ((453, 323), (184, 42, 206)),
    ((465, 322), (185, 46, 199)),
    ((535, 280), (250, 253, 224)),
    ((545, 272), (253, 255, 231)),
    ((626, 280), (254, 255, 234)),
    ((635, 271), (244, 246, 222)),
    ((640, 426), (254, 255, 228)),
]

GIANT_ANCIENT_CORE_GET = [
    ((420, 329), (176, 145, 91)),
    ((473, 315), (86, 82, 70)),
    ((447, 335), (105, 92, 86)),
    ((456, 321), (250, 191, 0)),
    ((468, 301), (158, 200, 198)),
    ((435, 302), (123, 239, 254)),
    ((473, 347), (84, 66, 64)),
    ((546, 280), (255, 255, 227)),
    ((553, 281), (247, 249, 225)),
    ((567, 280), (254, 255, 230)),
    ((576, 278), (253, 253, 225)),
    ((593, 276), (249, 252, 221)),
    ((617, 271), (255, 255, 232)),
    ((629, 278), (252, 252, 228)),
    ((660, 280), (255, 255, 234)),
    ((666, 282), (255, 255, 236)),
    ((683, 277), (253, 255, 231)),
    ((699, 276), (251, 254, 225)),
    ((726, 286), (251, 254, 223)),
    ((729, 272), (245, 248, 219)),
    ((752, 277), (254, 255, 226)),
    ((761, 282), (254, 255, 223)),
]

ANCIENT_CORE_GET = [
    ((469, 315), (69, 107, 128)),
    ((449, 324), (255, 236, 5)),
    ((469, 337), (251, 224, 0)),
    ((453, 341), (22, 20, 23)),
    ((478, 329), (52, 53, 58)),
    ((541, 272), (252, 255, 224)),
    ((553, 278), (254, 255, 235)),
    ((583, 281), (252, 254, 232)),
    ((590, 282), (249, 252, 223)),
    ((623, 276), (253, 255, 231)),
    ((676, 278), (255, 255, 233)),
    ((645, 287), (255, 255, 232)),
    ((647, 271), (252, 255, 222)),
    ((685, 281), (251, 254, 227)),
]

DIAMOND_GET = [
    ((435, 330), (126, 134, 147)),
    ((433, 320), (224, 225, 219)),
    ((464, 331), (61, 65, 74)),
    ((467, 315), (60, 67, 77)),
    ((464, 349), (170, 165, 136)),
    ((452, 326), (224, 227, 210)),
    ((457, 308), (251, 255, 253)),
    ((536, 271), (252, 255, 233)),
    ((554, 282), (255, 255, 231)),
    ((567, 281), (254, 255, 224)),
    ((583, 278), (255, 255, 227)),
    ((614, 278), (245, 247, 223)),
    ((639, 277), (255, 255, 228)),
    ((485, 330), (122, 127, 146)),
]

RUBY_GET = [
    ((461, 320), (248, 139, 178)),
    ((471, 306), (206, 66, 65)),
    ((482, 318), (63, 29, 27)),
    ((429, 329), (255, 173, 202)),
    ((461, 354), (40, 45, 41)),
    ((440, 327), (91, 94, 85)),
    ((539, 279), (251, 255, 232)),
    ((560, 285), (255, 255, 229)),
    ((569, 277), (253, 255, 227)),
    ((588, 286), (251, 254, 227)),
    ((474, 338), (159, 45, 70)),
]

TOPAZ_GET = [
    ((444, 310), (255, 254, 250)),
    ((440, 340), (224, 185, 19)),
    ((484, 318), (125, 122, 25)),
    ((474, 339), (105, 106, 98)),
    ((469, 350), (56, 61, 57)),
    ((464, 319), (48, 55, 1)),
    ((539, 270), (253, 254, 222)),
    ((564, 285), (255, 255, 225)),
    ((587, 279), (238, 242, 209)),
    ((602, 275), (253, 255, 227)),
    ((595, 285), (252, 255, 226)),
]

SAPPHIRE_GET = [
    ((461, 306), (70, 82, 168)),
    ((448, 320), (74, 98, 208)),
    ((463, 323), (20, 32, 54)),
    ((476, 315), (53, 70, 200)),
    ((445, 337), (60, 69, 210)),
    ((428, 317), (144, 175, 242)),
    ((434, 334), (135, 112, 96)),
    ((486, 329), (57, 54, 47)),
    ((558, 281), (252, 255, 229)),
    ((566, 278), (250, 255, 241)),
    ((583, 278), (250, 255, 233)),
    ((599, 277), (255, 255, 234)),
    ((622, 278), (245, 251, 223)),
    ((631, 282), (252, 255, 234)),
]

OPAL_GET = [
    ((640, 429), (249, 255, 223)),
    ((440, 310), (253, 253, 227)),
    ((463, 347), (36, 42, 40)),
    ((432, 336), (86, 91, 68)),
    ((475, 327), (251, 249, 237)),
    ((554, 278), (233, 242, 225)),
    ((576, 280), (252, 255, 231)),
    ((585, 279), (241, 253, 233)),
    ((458, 314), (117, 96, 111)),
    ((454, 333), (244, 255, 89)),
]

AMBER_GET = [
    ((640, 430), (253, 254, 222)),
    ((458, 317), (250, 114, 2)),
    ((433, 319), (102, 98, 86)),
    ((441, 343), (255, 215, 30)),
    ((543, 281), (250, 253, 222)),
    ((575, 277), (252, 255, 224)),
    ((560, 278), (251, 251, 223)),
    ((589, 282), (245, 249, 224)),
    ((606, 277), (254, 253, 232)),
]

ANCIENT_ARROW_GET = [
    ((424, 292), (180, 247, 253)),
    ((443, 313), (255, 233, 173)),
    ((458, 325), (149, 143, 109)),
    ((482, 354), (215, 211, 200)),
    ((493, 357), (89, 116, 99)),
    ((436, 303), (106, 218, 242)),
    ((541, 272), (249, 252, 221)),
    ((552, 278), (249, 251, 230)),
    ((567, 282), (249, 255, 238)),
    ((583, 280), (253, 255, 234)),
    ((584, 271), (251, 255, 236)),
    ((589, 282), (242, 241, 223)),
    ((606, 278), (251, 253, 231)),
    ((623, 276), (254, 255, 226)),
    ((647, 271), (255, 255, 227)),
    ((659, 277), (248, 252, 225)),
    ((670, 277), (242, 242, 214)),
    ((683, 288), (252, 251, 223)),
    ((698, 285), (236, 236, 208)),
    ((706, 285), (226, 229, 200)),
]

ICE_ARROW_GET = [
    ((640, 426), (255, 255, 225)),
    ((535, 280), (255, 255, 219)),
    ((557, 282), (255, 255, 221)),
    ((587, 282), (254, 254, 226)),
    ((601, 277), (255, 255, 224)),
    ((611, 277), (254, 254, 218)),
    ((644, 278), (255, 254, 223)),
    ((484, 357), (201, 208, 192)),
    ((440, 305), (34, 132, 219)),
    ((430, 313), (77, 160, 164)),
]

FIRE_ARROW_GET = [
    ((482, 355), (246, 252, 248)),
    ((492, 357), (7, 49, 35)),
    ((445, 303), (255, 221, 199)),
    ((440, 313), (223, 97, 85)),
    ((428, 298), (209, 88, 45)),
    ((535, 279), (254, 255, 223)),
    ((550, 280), (248, 253, 223)),
    ((558, 276), (252, 254, 230)),
    ((576, 279), (244, 250, 222)),
    ((599, 271), (255, 255, 226)),
    ((609, 285), (253, 255, 229)),
    ((614, 275), (247, 255, 231)),
    ((634, 287), (233, 241, 217)),
    ((647, 276), (253, 255, 235)),
    ((662, 276), (249, 255, 236)),
]

SHOCK_ARROW_GET = [
    ((428, 302), (242, 240, 139)),
    ((417, 313), (166, 130, 18)),
    ((466, 354), (216, 215, 210)),
    ((477, 358), (51, 72, 53)),
    ((439, 325), (55, 82, 63)),
    ((523, 279), (251, 254, 225)),
    ((536, 278), (254, 255, 233)),
    ((555, 288), (249, 253, 226)),
    ((567, 281), (251, 255, 232)),
    ((584, 280), (228, 229, 197)),
    ((611, 271), (253, 253, 227)),
    ((624, 277), (250, 255, 225)),
    ((635, 277), (249, 252, 223)),
    ((663, 284), (226, 229, 202)),
    ((670, 285), (255, 255, 227)),
]

BOMB_ARROW_GET = [
    ((482, 355), (254, 252, 240)),
    ((488, 361), (81, 146, 124)),
    ((432, 302), (243, 86, 45)),
    ((439, 301), (244, 121, 62)),
    ((535, 278), (250, 253, 222)),
    ((569, 277), (255, 255, 227)),
    ((591, 277), (252, 255, 228)),
    ((622, 272), (255, 255, 236)),
    ((634, 277), (251, 252, 220)),
    ((644, 277), (255, 255, 217)),
    ((678, 277), (250, 253, 224)),
]

FOOD_GET_MAKE = [
    ((545, 301), (254, 54, 64)),
    ((640, 427), (255, 255, 225)),
    ((630, 421), (247, 249, 228)),
    ((640, 436), (249, 249, 223)),
    ((650, 421), (250, 247, 228)),
]

DUBIOUS_FOOD_BAD = [
    ((451, 336), (70, 78, 114)),
    ((437, 314), (102, 164, 81)),
    ((436, 344), (99, 68, 65)),
    ((481, 299), (237, 231, 169)),
    ((474, 337), (117, 131, 17)),
    ((551, 304), (250, 57, 52)),
    ((458, 307), (69, 123, 73)),
    ((533, 275), (255, 255, 233)),
    ((535, 258), (255, 255, 229)),
    ((571, 257), (245, 248, 221)),
    ((577, 273), (253, 255, 225)),
    ((610, 264), (253, 255, 227)),
    ((619, 264), (255, 255, 227)),
    ((625, 274), (249, 254, 222)),
    ((633, 264), (253, 255, 225)),
]

ROCK_HARD_FOOD_BAD = [
    ((449, 323), (73, 70, 77)),
    ((482, 326), (120, 94, 93)),
    ((449, 307), (93, 158, 32)),
    ((473, 328), (99, 90, 109)),
    ((433, 336), (110, 94, 107)),
    ((546, 301), (253, 55, 54)),
    ((555, 301), (59, 71, 69)),
    ((533, 274), (253, 255, 230)),
    ((544, 274), (248, 253, 221)),
    ((575, 273), (190, 190, 166)),
    ((577, 264), (252, 254, 230)),
    ((598, 269), (245, 248, 217)),
    ((608, 273), (250, 255, 225)),
    ((622, 258), (255, 255, 228)),
    ((636, 274), (252, 255, 224)),
    ((648, 263), (248, 251, 222)),
    ((643, 273), (255, 255, 234)),
]

ELIXER_GET = [
    ((545, 301), (71, 71, 69)),
    ((555, 301), (60, 60, 58)),
    ((540, 309), (19, 21, 10)),
    ((562, 309), (18, 20, 9)),
    ((640, 426), (238, 241, 210)),
    ((629, 420), (249, 249, 225)),
    ((649, 420), (255, 252, 223)),
    ((640, 434), (149, 146, 115)),
    ((467, 300), (192, 217, 185)),
]

NEW_ITEM_GET = [
    ((640, 428), (250, 253, 224)),
    ((650, 421), (203, 208, 185)),
    ((630, 422), (254, 255, 230)),
    ((640, 437), (245, 255, 224)),
    ((898, 422), (254, 253, 225)),
    ((906, 414), (254, 255, 226)),
    ((907, 421), (245, 250, 218)),
    ((898, 414), (230, 238, 214)),
    ((861, 416), (245, 254, 237)),
    ((884, 421), (243, 255, 238)),
    ((836, 421), (245, 255, 237)),
]

# ----------------------------------------------------

class right_bumper(Switch):
    def __init__(self, nsg2, nsg3):
        self.usb_2=nsg2
        self.usb_3=nsg3

    async def on(self, seat=0):
        if seat == 0:
            self.usb_3.press(NSButton.RIGHT_TRIGGER)
            logging.info(f"\t{seat} | RIGHT_TRIGGER down")
        elif seat == 1 and not RESTRICTED:
            self.usb_2.press(NSButton.RIGHT_TRIGGER)
            logging.info(f"\t{seat} | RIGHT_TRIGGER down")


    async def off(self, seat=0):
        if seat == 0:
            self.usb_3.release(NSButton.RIGHT_TRIGGER)
            logging.info(f"\t...{seat} | RIGHT_TRIGGER up")
        elif seat == 1 and not RESTRICTED:
            self.usb_2.release(NSButton.RIGHT_TRIGGER)
            logging.info(f"\t...{seat} | RIGHT_TRIGGER up")

# ----------------------------------------------------

class right_throttle(Switch):
    def __init__(self, nsg2, nsg3):
        self.usb_2=nsg2
        self.usb_3=nsg3

    async def on(self, seat=0):
        if seat == 0:
            self.usb_3.press(NSButton.RIGHT_THROTTLE)
            logging.info(f"\t{seat} | RIGHT_THROTTLE down")
        elif seat == 1 and not RESTRICTED:
            self.usb_2.press(NSButton.RIGHT_THROTTLE)
            logging.info(f"\t{seat} | RIGHT_THROTTLE down")


    async def off(self, seat=0):
        if seat == 0:
            self.usb_3.release(NSButton.RIGHT_THROTTLE)
            logging.info(f"\t...{seat} | RIGHT_THROTTLE up")
        elif seat == 1 and not RESTRICTED:
            self.usb_2.release(NSButton.RIGHT_THROTTLE)
            logging.info(f"\t...{seat} | RIGHT_THROTTLE up")

# ----------------------------------------------------

class reset_trinkets(Switch):
    async def on(self, seat=0):
        global allowReset
        if allowReset:
            send_sig(nsg2_reset, ON)
            send_sig(nsg3_reset, ON)
            await asyncio.sleep(0.5)
            send_sig(nsg2_reset, OFF)
            send_sig(nsg3_reset, OFF)
            await asyncio.sleep(2)
            allowReset = False
            logging.info(f"\t{seat} | TRINKET_RESET down")

    async def off(self, seat=0):
        logging.info(f"\t...{seat} | TRINKET_RESET up")

# ----------------------------------------------------

class capture_screen(Switch):
    async def on(self, seat=0):
        global save_individual_frame
        save_individual_frame = True
        logging.info(f"\t{seat} | Capturing_Frames down")

    async def off(self, seat=0):
        global save_individual_frame
        save_individual_frame = False
        logging.info(f"\t{seat} | Capturing_Frames up")

# ----------------------------------------------------

class debug_switch(Switch):
    def __init__(self):
        global DEBUG
        DEBUG = False

    async def on(self, seat=0):
        global DEBUG
        if DEBUG:
            DEBUG = False
        else:
            DEBUG = True

        logging.info(f"\t{seat} | debug_switch down")

    async def off(self, seat=0):
        logging.info(f"\t{seat} | debug_switch up")

# ----------------------------------------------------

class EndEarly(Switch):
    def __init__(self,io):
        self.io = io

    async def on(self, seat=0):
        if seat == 1:
            self.io.disable_inputs()
            self.io.send_playing_ended()
            await self.end_game()
            logging.info(str(seat)+" | Ending")

    async def off(self, seat=0):
        print("end")

# ----------------------------------------------------

class BOTW_IR(Game):
    async def on_init(self):
        self.prepare = True

        # init controls
        self.usb_2 = NSGamepadSerial()
        self.usb_3 = NSGamepadSerial()
        try:
            # RX -> TXD | GPIO14 (08 - Blue Wire) | TX -> RXD | GPIO15 (10 - Green Wire)
            # SERIAL_0 = serial.Serial('/dev/ttyAMA0', 2000000, timeout=0)
            # RX -> TXD | GPIO00 (27 - Blue Wire) | TX -> RXD | GPIO01 (28 - Green Wire)
            # SERIAL_1 = serial.Serial('/dev/ttyAMA1', 2000000, timeout=0) 
            # RX -> TXD | GPIO04 (07 - Blue Wire) | TX -> RXD | GPIO05 (29 - Green Wire)
            SERIAL_2 = serial.Serial('/dev/ttyAMA2', 2000000, timeout=0)
            # RX -> TXD | GPIO08 (24 - Blue Wire) | TX -> RXD | GPIO09 (21 - Green Wire)
            SERIAL_3 = serial.Serial('/dev/ttyAMA3', 2000000, timeout=0)
            # RX -> TXD | GPIO12 (32 - Blue Wire) | TX -> RXD | GPIO13 (33 - Green Wire)
            # SERIAL_4 = serial.Serial('/dev/ttyAMA4', 2000000, timeout=0)
            logging.info(f"Found ttyAMA2/ttyAMA3")
        except:
            logging.critical(f"NSGadget serial port not found")
            sys.exit(1)
        self.usb_2.begin(SERIAL_2)
        self.usb_3.begin(SERIAL_3)

        # Register using helper class files
        self.io.register_inputs(
            {
                "left_joystick": NSJoystick( "Left",
                    self.usb_2.leftXAxis, self.usb_2.leftYAxis,
                    self.usb_3.leftXAxis, self.usb_3.leftYAxis
                ),
                "right_joystick": NSJoystick( "Right",
                    self.usb_2.rightXAxis, self.usb_2.rightYAxis,
                    self.usb_3.leftXAxis, self.usb_3.leftYAxis
                ),
                "dpad_up": NSDPadSwitch(self.usb_2, self.usb_3, NSDPad.UP, "UP"),
                "dpad_left": NSDPadSwitch(self.usb_2, self.usb_3, NSDPad.LEFT, "LEFT"),
                "dpad_right": NSDPadSwitch(self.usb_2, self.usb_3, NSDPad.RIGHT, "RIGHT"),
                "dpad_down": NSDPadSwitch(self.usb_2, self.usb_3, NSDPad.DOWN, "DOWN"),
                "Y": NSSwitch(self.usb_2, self.usb_3, NSButton.Y, "Y"),
                "X": NSSwitch(self.usb_2, self.usb_3, NSButton.X, "X"),
                "A": NSSwitch(self.usb_2, self.usb_3, NSButton.A, "A"),
                "B": NSSwitch(self.usb_2, self.usb_3, NSButton.B, "B"),
                "left_throttle": NSSwitch(self.usb_2, self.usb_3, NSButton.LEFT_THROTTLE, "LEFT_THROTTLE"),
                "left_trigger": NSSwitch(self.usb_2, self.usb_3, NSButton.LEFT_TRIGGER, "LEFT_TRIGGER"),
                "left_stick": NSSwitch(self.usb_2, self.usb_3, NSButton.LEFT_STICK, "LEFT_STICK"),
                "right_stick": NSSwitch(self.usb_2, self.usb_3, NSButton.RIGHT_STICK, "RIGHT_STICK"),
                "minus": NSSwitch(self.usb_2, self.usb_3, NSButton.MINUS, "MINUS"),
                "plus": NSSwitch(self.usb_2, self.usb_3, NSButton.PLUS, "PLUS"),
                "reset_trinkets": reset_trinkets(),
            },
        )

        # init image rec
        self.image_rec_task = asyncio.create_task(self.image_rec_main())
        self.image_rec_task.add_done_callback(self.image_rec_done_cb)

        # Register within game file
        self.io.register_inputs(
            {
                "right_trigger": right_bumper(self.usb_2, self.usb_3),
                "right_throttle": right_throttle(self.usb_2, self.usb_3),
                "quit_game": EndEarly(self.io),
                "capture_frame": capture_screen(),
            }
        )
        self.io.register_inputs(
            {
                "home": NSSwitch(self.usb_2, self.usb_3, NSButton.HOME, "HOME"),
                "capture": NSSwitch(self.usb_2, self.usb_3, NSButton.CAPTURE, "CAPTURE"),
                "debug_switch": debug_switch(),
            },
            admin = True
        )

        self.curUser = ""
        self.userIDs = []
        self.userScores = []
        self.knownIndex = 0
        self.points = 0
        with open("player_scores.dat", "r") as file:
            for line in file:
                currentPlace=line[:-1]
                breakPt = currentPlace.index("|")
                uid = currentPlace[0:int(breakPt)]
                score = int(currentPlace[int(breakPt)+1:])
                if not uid in self.userIDs:
                    self.userIDs.append(uid)
                    self.userScores.append(score)

# ----------------------------------------------------

    async def on_start(self):
        # logging.info(self.players+"\n")
        self.curUser = self.players
        player = json.loads(json.dumps(self.players))[0]['username']
        curPlayerRequest = requests.post("http://10.0.0.239:3030/player", json.loads('{"player": "'+player+'"}'))
        req = requests.get("https://g9b1fyald3.execute-api.eu-west-1.amazonaws.com/master/users?search="+str(player)).text
        uid = json.loads(req)['result'][0]['userId']
        if str(uid) in self.userIDs:
            self.knownIndex = self.userIDs.index(str(uid))
            self.points = self.userScores[self.knownIndex]
        else: 
            self.userIDs.append(str(uid))
            self.points = 0
            self.userScores.append(self.points)
            self.knownIndex = len(self.userScores)-1
        
        logging.info(self.points)

# ----------------------------------------------------

    async def on_pre_game(self):
        self.io.send_pre_game_ready()

# ----------------------------------------------------

    async def on_finish(self):
        logging.info(f"Finish")
        self.io.disable_inputs()

        if not LOCKED:
            self.points += POINTS_PER_GAME

        self.userScores[0] = 0
        self.io.send_score(score=self.points, seat=1, final_score=True)
        self.userScores[self.knownIndex] = self.points

        with open("player_scores.dat", "w") as file:
            for i in range(len(self.userIDs)):
                item = self.userIDs[i]+"|"+str(self.userScores[i])
                file.write('%s\n' % item)

        if not LOCKED:
            message = "{"+f"\"player\": \"{str(self.userIDs[self.knownIndex])}\",\"triggerid\": \"sys_gametime\", \"points\": {str(POINTS_PER_GAME)}, \"totalpoints\": {str(self.points)}"+"}"
            jsonmsg = json.loads(message)
            if self.knownIndex != 0:
                response = requests.post("http://proco.me/data/botw/addlogentry.php", json.dumps(jsonmsg)).text

        self.prepare = True
        self.knownIndex = 0

        self.usb_2.rightYAxis(128)
        self.usb_2.rightXAxis(128)
        self.usb_2.leftYAxis(128)
        self.usb_2.leftXAxis(128)   

        self.usb_3.rightYAxis(128)
        self.usb_3.rightXAxis(128)
        self.usb_3.leftYAxis(128)
        self.usb_3.leftXAxis(128)    

        self.usb_2.releaseAll()
        self.usb_3.releaseAll()

# ----------------------------------------------------

    async def on_prepare(self):
        logging.info("preparing...")
        send_sig(nsg2_reset, ON)
        send_sig(nsg3_reset, ON)
        await asyncio.sleep(0.5)
        send_sig(nsg2_reset, OFF)
        send_sig(nsg3_reset, OFF)
        await asyncio.sleep(2)

        self.prepare = True
        self.knownIndex = 0

        curPlayerRequest = requests.post("http://10.0.0.239:3030/player", json.loads('{"player": ""}'))

        while self.prepare: 
            await asyncio.sleep(3)

        self.usb_2.releaseAll()
        self.usb_3.releaseAll()

        logging.info("...preparing.finish")

# ----------------------------------------------------

    async def on_exit(self, reason, exception):
        # end controls
        logging.info(f"Exit")
        self.io.disable_inputs() 

        self.usb_2.end()
        self.usb_3.end()

        # end image rec task
        await self.cap.release()
        self.image_rec_task.cancel()

# ----------------------------------------------------

    async def image_rec_main(self):        
        # create capture
        self.cap = await AsyncVideoCapture.create("/dev/video21")

        global LOCKED, RESTRICTED, allowReset
        RESTRICTED = False
        LOCKED = False

        # Screen triggers
        main_inv = get_pixel_detector(NO_INV_1, 50)
        bad_inv = get_pixel_detector(NO_INV_2, 50)
        save_menu = get_pixel_detector(SAVE_MENU, 50)
        load_menu = get_pixel_detector(LOAD_MENU, 50)
        options_menu = get_pixel_detector(OPTIONS_MENU, 50)
        return_to_main = get_pixel_detector(RETURN_TO_MAIN, 50)
        vr_menu_start = get_pixel_detector(VR_MENU_START, 50)
        vr_menu_confirm = get_pixel_detector(VR_MENU_CONFIRM, 50)

        controller_menu_1 = get_pixel_detector(CONTROLLER_MENU_1, 100)
        controller_menu_2 = get_pixel_detector(CONTROLLER_MENU_2, 100)
        controller_menu_2_2 = get_pixel_detector(CONTROLLER_MENU_2_2, 100)
        death_screen_red = get_pixel_detector(DEATH_SCREEN_RED, 50)
        death_screen_blue = get_pixel_detector(DEATH_SCREEN_BLUE, 50)
        death_screen_yellow = get_pixel_detector(DEATH_SCREEN_YELLOW, 50)

        map_menu_early_1 = get_pixel_detector(MAP_MENU_EARLY_1, 50)
        map_menu_early_2 = get_pixel_detector(MAP_MENU_EARLY_2, 50)
        minus_menu_broad = get_pixel_detector(MINUS_MENU_BROAD, 50)
        map_menu = get_pixel_detector(MAP_MENU, 50)
        chat_prompt = get_pixel_detector(CHAT_PROMPT, 50)

        home_screen = get_pixel_detector(HOME_SCREEN, 50)
        something_wrong = get_pixel_detector(SOMETHING_WRONG, 50)
        in_vr_menu = get_pixel_detector(IN_VR_MENU, 50)
        title_screen = get_pixel_detector(TITLE_SCREEN, 50)
        wake_menu = get_pixel_detector(WAKE_MENU, 50)

        # Point triggers
        triggerID = []
        detector = []
        gotten = []
        timeoutThreshold = []
        pointsToAdd = []
        curTimeout = []

        triggerID.append("we_mainquestcomplete")
        detector.append(get_pixel_detector(MAIN_QUEST_COMPLETE, 15))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("we_shrinequestcomplete")
        detector.append(get_pixel_detector(SHRINE_QUEST_COMPLETE, 15))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(30)
        curTimeout.append(0)
        triggerID.append("we_sidequestcomplete")
        detector.append(get_pixel_detector(SIDE_QUEST_COMPLETE, 15))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("we_registerhorse")
        detector.append(get_pixel_detector(REGISTER_HORSE, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(20)
        curTimeout.append(0)
        triggerID.append("we_weaponexpand")
        detector.append(get_pixel_detector(HESTU_SLOT_EXPAND, 50))
        gotten.append(True)
        timeoutThreshold.append(60)
        pointsToAdd.append(15)
        curTimeout.append(0)
        triggerID.append("we_towerget")
        detector.append(get_pixel_detector(TOWER_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(100)
        curTimeout.append(0)
        triggerID.append("we_armorupgrade")
        detector.append(get_pixel_detector(GIANT_FAIRY_UPGRADE, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(15)
        curTimeout.append(0)
        triggerID.append("we_trackedenemy")
        detector.append(get_pixel_detector(MINI_BOSS_BEAT_TALLOS, 100))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("we_trackedenemy")
        detector.append(get_pixel_detector(MINI_BOSS_BEAT_HINOX, 100))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("we_trackedenemy")
        detector.append(get_pixel_detector(MINI_BOSS_BEAT_STALNOX, 100))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("we_trackedenemy")
        detector.append(get_pixel_detector(MINI_BOSS_BEAT_MOLDUGA, 100))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("mi_korok")
        detector.append(get_pixel_detector(KOROK_SEED_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(20)
        curTimeout.append(0)
        triggerID.append("mi_spiritorb")
        detector.append(get_pixel_detector(SPIRIT_ORB_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("mi_heartcontainer")
        detector.append(get_pixel_detector(HEART_CONTAINER_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("mi_staminavessel")
        detector.append(get_pixel_detector(STAMINA_CONTAINER_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("mi_sensorplus")
        detector.append(get_pixel_detector(SENSOR_PLUS_UPGRADE, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("mi_stasisplus")
        detector.append(get_pixel_detector(STASIS_PLUS_UPGRADE, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("mi_bombplus")
        detector.append(get_pixel_detector(BOMB_PLUS_UPGRADE, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(50)
        curTimeout.append(0)
        triggerID.append("tc_goldrupee")
        detector.append(get_pixel_detector(GOLD_RUPEE_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(20)
        curTimeout.append(0)
        triggerID.append("tc_silverrupee")
        detector.append(get_pixel_detector(SILVER_RUPEE_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(10)
        curTimeout.append(0)
        triggerID.append("tc_purplerupee")
        detector.append(get_pixel_detector(PURPLE_RUPEE_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(7)
        curTimeout.append(0)
        triggerID.append("tc_giantcore")
        detector.append(get_pixel_detector(GIANT_ANCIENT_CORE_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(15)
        curTimeout.append(0)
        triggerID.append("tc_ancientcore")
        detector.append(get_pixel_detector(ANCIENT_CORE_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(7)
        curTimeout.append(0)
        triggerID.append("i_diamond")
        detector.append(get_pixel_detector(DIAMOND_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(30)
        curTimeout.append(0)
        triggerID.append("i_ruby")
        detector.append(get_pixel_detector(RUBY_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(15)
        curTimeout.append(0)
        triggerID.append("i_topaz")
        detector.append(get_pixel_detector(TOPAZ_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(12)
        curTimeout.append(0)
        triggerID.append("i_sapphire")
        detector.append(get_pixel_detector(SAPPHIRE_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(20)
        curTimeout.append(0)
        triggerID.append("i_opal")
        detector.append(get_pixel_detector(OPAL_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(7)
        curTimeout.append(0)
        triggerID.append("i_amber")
        detector.append(get_pixel_detector(AMBER_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(5)
        curTimeout.append(0)
        triggerID.append("i_ancientarrow")
        detector.append(get_pixel_detector(ANCIENT_ARROW_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(10)
        curTimeout.append(0)
        triggerID.append("i_icearrow")
        detector.append(get_pixel_detector(ICE_ARROW_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(5)
        curTimeout.append(0)
        triggerID.append("i_firearrow")
        detector.append(get_pixel_detector(FIRE_ARROW_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(5)
        curTimeout.append(0)
        triggerID.append("i_shockarrow")
        detector.append(get_pixel_detector(SHOCK_ARROW_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(5)
        curTimeout.append(0)
        triggerID.append("i_bombarrow")
        detector.append(get_pixel_detector(BOMB_ARROW_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(5)
        curTimeout.append(0)
        triggerID.append("i_food")
        detector.append(get_pixel_detector(FOOD_GET_MAKE, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(3)
        curTimeout.append(0)
        triggerID.append("i_bad")
        detector.append(get_pixel_detector(DUBIOUS_FOOD_BAD, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(0)
        curTimeout.append(0)
        triggerID.append("i_bad")
        detector.append(get_pixel_detector(ROCK_HARD_FOOD_BAD, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(0)
        curTimeout.append(0)
        triggerID.append("i_pot")
        detector.append(get_pixel_detector(ELIXER_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(3)
        curTimeout.append(0)
        triggerID.append("i_new")
        detector.append(get_pixel_detector(NEW_ITEM_GET, 50))
        gotten.append(True)
        timeoutThreshold.append(100)
        pointsToAdd.append(2)
        curTimeout.append(0)

        # loop through frames
        i = 0
        z = 0
        async for frame in self.cap.frames():
            # detect
            if main_inv(frame) and not DEBUG:
                RESTRICTED = True
            else: 
                RESTRICTED = False

            try:
                if bad_inv(frame) and not DEBUG:
                    logging.info(f"bad inv")
                    self.io.disable_input(1)
                    self.usb_2.press(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.PLUS)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.PLUS)
                    await asyncio.sleep(2)
                    self.io.enable_input(1)
            except:
                if bad_inv(frame) and not DEBUG:
                    logging.info(f"bad inv")
                    self.usb_2.press(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.PLUS)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.PLUS)
                    await asyncio.sleep(2)

            try:
                if (save_menu(frame) or load_menu(frame) or options_menu(frame) or return_to_main(frame) or vr_menu_start(frame) or vr_menu_confirm(frame)) and not DEBUG:
                    logging.info(f"save menu")
                    self.io.disable_input(1)
                    self.usb_2.press(NSButton.B)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.B)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(2)
                    self.io.enable_input(1)
            except:
                if (save_menu(frame) or load_menu(frame) or options_menu(frame) or return_to_main(frame) or vr_menu_start(frame) or vr_menu_confirm(frame)) and not DEBUG:
                    logging.info(f"save menu")
                    self.usb_2.press(NSButton.B)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.B)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.LEFT_TRIGGER)
                    await asyncio.sleep(2)

            try:
                if controller_menu_1(frame) and not DEBUG:
                    self.io.disable_input(1)
                    send_sig(nsg2_reset, ON)
                    send_sig(nsg3_reset, ON)
                    send_sig(nsg2_reset, OFF)
                    send_sig(nsg3_reset, OFF)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.MINUS)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.MINUS)
                    await asyncio.sleep(2)
                    self.io.enable_input(1)
            except:
                if controller_menu_1(frame) and not DEBUG:
                    send_sig(nsg2_reset, ON)
                    send_sig(nsg3_reset, ON)
                    send_sig(nsg2_reset, OFF)
                    send_sig(nsg3_reset, OFF)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.MINUS)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.MINUS)
                    await asyncio.sleep(2)


            try:
                if (controller_menu_2(frame) or controller_menu_2_2(frame)) and not DEBUG:
                    self.io.disable_input(1)
                    send_sig(nsg2_reset, ON)
                    send_sig(nsg3_reset, ON)
                    send_sig(nsg2_reset, OFF)
                    send_sig(nsg3_reset, OFF)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.A)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.A)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.A)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.A)
                    await asyncio.sleep(2)
                    self.io.enable_input(1)
            except:
                if (controller_menu_2(frame) or controller_menu_2_2(frame)) and not DEBUG:
                    send_sig(nsg2_reset, ON)
                    send_sig(nsg3_reset, ON)
                    send_sig(nsg2_reset, OFF)
                    send_sig(nsg3_reset, OFF)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.A)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.A)
                    await asyncio.sleep(2)
                    self.usb_2.press(NSButton.A)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.A)
                    await asyncio.sleep(2)

            try:
                if (death_screen_red(frame) or death_screen_blue(frame) or death_screen_yellow(frame)) and not DEBUG:
                    self.io.disable_input(1)
                    send_sig(nsg2_reset, ON)
                    send_sig(nsg3_reset, ON)
                    send_sig(nsg2_reset, OFF)
                    send_sig(nsg3_reset, OFF)
                    await asyncio.sleep(2)
                    self.usb_2.dPad(NSDPad.UP)
                    await asyncio.sleep(0.1)
                    self.usb_2.dPad(NSDPad.CENTERED)
                    await asyncio.sleep(2)
                    self.io.disable_input(1)
                    self.usb_2.press(NSButton.A)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.A)
                    await asyncio.sleep(1)
                    self.io.enable_input(1)
            except:
                if (death_screen_red(frame) or death_screen_blue(frame) or death_screen_yellow(frame)) and not DEBUG:
                    send_sig(nsg2_reset, ON)
                    send_sig(nsg3_reset, ON)
                    send_sig(nsg2_reset, OFF)
                    send_sig(nsg3_reset, OFF)
                    await asyncio.sleep(2)
                    self.usb_2.dPad(NSDPad.UP)
                    await asyncio.sleep(0.1)
                    self.usb_2.dPad(NSDPad.CENTERED)
                    await asyncio.sleep(2)
                    self.io.disable_input(1)
                    self.usb_2.press(NSButton.A)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.A)
                    await asyncio.sleep(1)


            if (self.prepare and not ((map_menu(frame) or map_menu_early_1(frame) or map_menu_early_2(frame) or minus_menu_broad(frame)) or chat_prompt(frame)) and not LOCKED) and not DEBUG:
                if z % 3 == 2:
                    self.usb_2.press(NSButton.A)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.A)
                    await asyncio.sleep(1)
                    self.usb_2.press(NSButton.B)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.B)
                    await asyncio.sleep(1)
                else:
                    self.usb_2.press(NSButton.MINUS)
                    await asyncio.sleep(0.1)
                    self.usb_2.release(NSButton.MINUS)
                    await asyncio.sleep(1)
                z += 1
            elif not LOCKED:
                z = 0
                self.prepare = False

            if (home_screen(frame) or something_wrong(frame) or in_vr_menu(frame) or title_screen(frame) or wake_menu(frame)) and not LOCKED and not DEBUG:
                self.io.disable_input(1)
                player = json.loads(json.dumps(self.curUser))[0]['username']
                msg = "BREATH OF THE WILD\nGame locked due to either being at home screen or capture card bars. \nUser's information are as follows:\n> "+player+"\n> "+self.userIDs[self.knownIndex]
                bot.send_message(chat_id, msg, parse_mode="markdown")
                LOCKED = True

            if LOCKED: 
                self.io.send_playing_ended()
                self.prepare = True

            for pointTrigger in range(len(detector)):
                if detector[pointTrigger](frame):
                    if not gotten[pointTrigger]:
                        self.points += pointsToAdd[pointTrigger]
                        self.io.send_score(score = self.points, seat = 1, final_score = False)
                        message = "{"+f"\"player\": \"{str(self.userIDs[self.knownIndex])}\",\"triggerid\": \"{str(triggerID[pointTrigger])}\", \"points\": {str(pointsToAdd[pointTrigger])}, \"totalpoints\": {str(self.points)}"+"}"
                        jsonmsg = json.loads(message)
                        if self.knownIndex != 0 or triggerID[pointTrigger] == "i_bad":
                            response = requests.post("http://proco.me/data/botw/addlogentry.php", json.dumps(jsonmsg)).text
                        self.usb_2.press(NSButton.A)
                        await asyncio.sleep(0.1)
                        self.usb_2.release(NSButton.A)
                    curTimeout[pointTrigger] = 0
                    gotten[pointTrigger] = True
                elif curTimeout[pointTrigger] < timeoutThreshold[pointTrigger]:
                    curTimeout[pointTrigger] += 1
                else:
                    gotten[pointTrigger] = False

            # generic
            if i%100==0:
                allowReset = True
            if (i % 100 == 0 and SAVE_FRAMES) or save_individual_frame:
                # logging.info("100 frames checked")
                cv2.imwrite(f"{SAVE_DIR_PATH}/{i}.jpg", frame)
                logging.info(f"SAVED {i}.jpg")
            i += 1

# ----------------------------------------------------

    def image_rec_done_cb(self, fut):
        # make program end if image_rec_task raises error
        if not fut.cancelled() and fut.exception() is not None:
            import traceback, sys  # noqa: E401

            e = fut.exception()
            logging.error(
                "".join(traceback.format_exception(None, e, e.__traceback__))
            )
            sys.exit(1)

if __name__ == "__main__":
    BOTW_IR().run()


